@page "/supplier"
@using DataAccessLibrary
@using CapstoneProject.Components.Model
@using DataAccessLibrary.Model
@using Microsoft.AspNetCore.Authorization
@inject ISupplierData _db
@attribute [Authorize(Roles = "employee")]

<PageTitle>Supplier</PageTitle>

@if (_suppliers == null)
{
    <p>Loading suppliers...</p>
}
else if (!_suppliers.Any())
{
    <p>No suppliers found.</p>
}
else
{
    <!-- MudBlazor Table -->
    <MudDataGrid T="SupplierModel" MultiSelection="true" Items="@_suppliers" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                 Hideable="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Suppliers</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <SelectColumn T="SupplierModel" />
            <PropertyColumn Property="x => x.Name" SortBy="@_sortBy"/>
            <PropertyColumn Property="x => x.Contact_Person" Title="Contact Person" />
            <PropertyColumn Property="x => x.Phone_Number" Title="Phone Person" />
            <PropertyColumn Property="x => x.Address" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="SupplierModel" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private IEnumerable<SupplierModel> _suppliers = new List<SupplierModel>();

    private string _searchString = "";
    private bool _sortNameByLength;

    private List<string> _events = new();

    // This method will be called when the page is initialized
    protected override async Task OnInitializedAsync()
    {
        // Fetch the suppliers without recent order data
        _suppliers = await _db.GetSuppliers();

        // Trigger the low stock notification process
        await _db.NotifySuppliersAboutLowStock();
    }

    // Accesses SupplierModel object and retrieves name based on length
    private Func<SupplierModel, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Name.Length;
        else
            return x.Name;
    };

    // quick filter - filter globally across multiple columns with the same input
    private Func<SupplierModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Contact_Person} {x.Phone_Number} {x.Address}".Contains(_searchString))
            return true;

        return false;
    };
}
