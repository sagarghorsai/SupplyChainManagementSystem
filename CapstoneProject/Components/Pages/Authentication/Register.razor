@page "/register"
@using DataAccessLibrary
@using DataAccessLibrary.Model
@using CapstoneProject.Components.Model
@rendermode InteractiveServer

@inject IUserData _db;
@inject NavigationManager navigationManager;

<h3>Register</h3>

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="card p-4 shadow-lg" style="width: 400px;">
        <div class="mb-3 text-center">
            <img src="/images/avatar.png" alt="Avatar" class="rounded-circle" style="max-height: 5rem;" />
            <h3 class="mt-2">Register</h3>
        </div>

        <EditForm Model="@registerUserModel" OnValidSubmit="UserRegister" FormName="registerForm">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label class="form-label">First Name</label>
                <InputText @bind-Value="registerUserModel.user_First" class="form-control" placeholder="Enter first name" />
                <ValidationMessage For="() => registerUserModel.user_First" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Last Name</label>
                <InputText @bind-Value="registerUserModel.user_Last" class="form-control" placeholder="Enter last name" />
                <ValidationMessage For="() => registerUserModel.user_Last" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Username</label>
                <InputText @bind-Value="registerUserModel.user_Name" class="form-control" placeholder="Enter username" />
                <ValidationMessage For="() => registerUserModel.user_Name" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Password</label>
                <InputText @bind-Value="registerUserModel.user_Password" type="password" class="form-control" placeholder="Enter password" />
                <ValidationMessage For="() => registerUserModel.user_Password" class="text-danger" />
            </div>

            <div class="text-danger text-center">
                @errorMessage <!-- Display any registration errors -->
            </div>

            <div class="d-grid gap-2">
                <button type="submit" class="btn btn-primary">Register</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm(FormName = "registerForm")]
    private RegisterUserModel registerUserModel { get; set; } = new RegisterUserModel();
    private string? errorMessage;

    private async Task UserRegister()
    {
        try
        {
            Console.WriteLine("Starting User Registration...");

            // Check if username already exists
            var existingUser = await _db.GetUserByUsername(registerUserModel.user_Name);
            if (existingUser != null)
            {
                errorMessage = "Username already exists. Please choose another.";
                return;
            }

            // Create a new user model
            var newUser = new UsersModel
                {
                    user_First = registerUserModel.user_First,
                    user_Last = registerUserModel.user_Last,
                    user_Name = registerUserModel.user_Name,
                    user_Password = registerUserModel.user_Password, // Hashing should be done in the data layer
                    Role = "customer",
                    CreatedAt = DateTime.Now
                };

            // Save user in database
            await _db.RegisterUser(newUser);

            Console.WriteLine("User successfully registered!");

            // Ensure Blazor's circuit is still active
            if (navigationManager != null)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                Console.WriteLine("Cant go back home");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during registration: {ex}");
            errorMessage = $"Registration failed: {ex.Message}";
        }
    }
}