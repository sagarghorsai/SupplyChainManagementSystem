@page "/orders"
@using DataAccessLibrary
@using DataAccessLibrary.Model
@inject IShipmentData ShipmentData
@rendermode InteractiveServer

<PageTitle>Orders</PageTitle>

@if (_orders == null)
{
    <p>Loading orders...</p>
}
else if (!_orders.Any())
{
    <p>No orders found.</p>
}
else
{
    <!-- HTML Orders -->/*
                <table class="table-striped table">
                    <thead>
                    <tr>
                    <th>Order ID</th>
                    <th>Shipment Status</th>
                    <th>Shipment Date</th>
                <th>Estimated Arrival</th>
            <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                    @foreach (var order in _orders)
                        {
                        <tr>
                            <td>@order.Order_Id</td>
                            <td>
                                <select @bind="order.Shipment_Confirmation" class="form-select">
                                <option value="Pending">Pending</option>
                                <option value="Shipped">Shipped</option>
                            <option value="Delivered">Delivered</option>
                        </select>
                        </td>
                        <td>@order.Shipment_Date.ToShortDateString()</td>
                        <td>@order.Estimated_Arrival_Date.ToShortDateString()</td>
                            <td>
                            <button class="btn btn-primary" @onclick="() => UpdateShipmentStatus(order.Order_Id, order.Shipment_Confirmation)">
                            Update Status
                            </button>

                                <button class="btn btn-info ms-2" @onclick="() => ShowDetails(order.Order_Id)">
                        Details
                    </button>
            </td>
        </tr>
    }
    </tbody>
    </table>*/
    
    /********************************************************************************************/
    <!-- MudBlazor Orders -->

    <MudDataGrid T="ShipmentModel" Items="@_orders.Take(_orders.Count())" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
                 StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                 Bordered="true" Style="width: 1675px" Dense="true">
        <Columns>
            <PropertyColumn Property="x => x.Order_Id" Title="Order ID" Editable="false" />
            <PropertyColumn Property="x => x.Shipment_Confirmation" Title="Shipment Confirmation" Style="">
                <EditTemplate>
                    <MudSelect @bind-Value="context.Item.Shipment_Confirmation" Required RequiredError="Select Shipment Status" Margin="@Margin.Dense" >
                         <MudSelectItem Value="validStatuses[0]">Pending</MudSelectItem>
                         <MudSelectItem Value="validStatuses[1]">Shipped</MudSelectItem>
                         <MudSelectItem Value="validStatuses[2]">Delivered</MudSelectItem>
                     </MudSelect>
                 </EditTemplate>
             </PropertyColumn>
             <PropertyColumn Property="x => x.Shipment_Date" Title="Shipment Date" Editable="false" />
             <PropertyColumn Property="x => x.Estimated_Arrival_Date" Title="Estimated Arrival Date" Editable="false" />
             <PropertyColumn Property="x => x.Estimated_Arrival_Date" Title="Order ID" Editable="false" />
             <TemplateColumn CellClass="justify-center" Title="Actions" Editable="false">
                 <CellTemplate>
                     <MudStack Row>
                     <MudButton Size="@Size.Medium" Variant="Variant.Filled" Color="Color.Primary" @onclick="() => UpdateShipmentStatus(context.Item.Order_Id, context.Item.Shipment_Confirmation)">Update Status</MudButton>
                        <MudButton Size="@Size.Medium" Variant="Variant.Filled" Color="Color.Primary" @onclick="() => ShowDetails(context.Item.Order_Id)">View Details</MudButton>
                    </MudStack>
             </CellTemplate>
         </TemplateColumn>
     </Columns>
 </MudDataGrid>
    @if (selectedOrder != null)
    {
        <h4 class="mt-4">Order Details</h4>
        <p><strong>Customer Name:</strong> @selectedOrder.CustomerName</p>
        <p><strong>Customer Email:</strong> @selectedOrder.CustomerEmail</p>
        <p><strong>Order Total:</strong> $@selectedOrder.Total_Amount</p>
        <p><strong>Order Items:</strong></p>
        <ul>
            @foreach (var item in selectedOrder.Items)
            {
                <li>@item.Name - @item.Quantity_ordered x $@item.Price</li>
            }
        </ul>
    }
}

@code {
    <!-- MudBlazor Variables -->
    public IEnumerable<ShipmentModel> _orders = new List<ShipmentModel>();
    private OrderDetail selectedOrder;

    private List<string> validStatuses = new List<string> { "Pending", "Shipped", "Delivered" };
    private bool _readOnly;
    private bool _isCellEditMode = true;
    private List<string> _events = new();

    // Shipment Editing Events
    void StartedEditingItem(ShipmentModel item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(ShipmentModel item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(ShipmentModel item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    protected override async Task OnInitializedAsync()
    {
        _orders = new List<ShipmentModel>();

        try
        {
            // Get all shipments directly using ShipmentData
            _orders = await ShipmentData.GetAllShipments();  // Fetch all shipments directly from ShipmentData

            if (_orders == null || !_orders.Any())
            {
                Console.WriteLine("No orders found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading orders: {ex.Message}");
        }
    }

    private async Task UpdateShipmentStatus(int orderId, string status)
    {
        try
        {
            // Update shipment status directly using ShipmentData
            await ShipmentData.UpdateShipmentStatus(orderId, status);

            // Update the status in the local list
            var orderToUpdate = _orders.FirstOrDefault(order => order.Order_Id == orderId);
            if (orderToUpdate != null)
            {
                orderToUpdate.Shipment_Confirmation = status;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating shipment status for OrderId {orderId}: {ex.Message}");
        }
    }

    private async Task ShowDetails(int orderId)
    {
        try
        {
            selectedOrder = await ShipmentData.GetOrderDetails(orderId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching details for OrderId {orderId}: {ex.Message}");
        }
    }
}
