@page "/inventory"
@using DataAccessLibrary
@using DataAccessLibrary.Model
@using CapstoneProject.Components.Model
@using Microsoft.AspNetCore.Authorization
@using System.Threading

@inject IProductData _db
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "employee")]

<PageTitle>Inventory</PageTitle>

<MudGrid Style="padding: 16px">
    <!-- Insert Product -->
    <MudItem xs="12" sm="6" md="4">
        <MudText Typo="Typo.h6">Insert New Product</MudText>
        <MudTextField @bind-Value="ipName" Label="Product Name" Variant="Variant.Outlined"></MudTextField>
        <MudTextField @bind-Value="ipDescription" Label="Description" Variant="Variant.Outlined"></MudTextField>
        <MudTextField @bind-Value="ipUnitPrice" Label="Unit Price" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" Variant="Variant.Outlined"></MudTextField>
        <MudTextField @bind-Value="ipQuantityAvailable" Label="Quantity Available" Variant="Variant.Outlined"></MudTextField>
        <MudTextField @bind-Value="ipSupplierId" Label="Supplier ID" Variant="Variant.Outlined"></MudTextField> <!-- Add Supplier ID -->
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="margin:5px" OnClick="InsertProduct">Insert</MudButton>
    </MudItem>

    <!-- Update Product -->
    <MudItem xs="12" sm="6" md="4">
        <MudText Typo="Typo.h6">Update Product</MudText>
        <MudTextField @bind-Value="upID" Label="Product ID" Variant="Variant.Outlined"></MudTextField>
        <MudTextField @bind-Value="upName" Label="Product Name" Variant="Variant.Outlined"></MudTextField>
        <MudTextField @bind-Value="upDescription" Label="Description" Variant="Variant.Outlined"></MudTextField>
        <MudTextField @bind-Value="upUnitPrice" Label="Unit Price" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" Variant="Variant.Outlined"></MudTextField>
        <MudTextField @bind-Value="upQuantityAvailable" Label="Quantity Available" Variant="Variant.Outlined"></MudTextField>
        <MudTextField @bind-Value="upSupplierId" Label="Supplier ID" Variant="Variant.Outlined"></MudTextField> <!-- Add Supplier ID -->
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="margin:5px" OnClick="UpdateProduct">Update</MudButton>
    </MudItem>

    <!-- Delete Product -->
    <MudItem xs="12" sm="6" md="4">
        <MudText Typo="Typo.h6">Delete Product</MudText>
        <MudTextField @bind-Value="dpID" Label="Product ID" Variant="Variant.Outlined"></MudTextField>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Style="margin:5px" OnClick="DeleteProduct">Delete</MudButton>
    </MudItem>
</MudGrid>

@if (_products is null)
{
    <p><em>Loading...</em></p>
}
else if (!_products.Any())
{
    <p>No products found.</p>
}
else
{
    <MudDataGrid T="ProductModel" MultiSelection="true" Items="@_products" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                 Hideable="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Inventory</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <Columns>
            <SelectColumn T="ProductModel" />
            <PropertyColumn Property="x => x.Product_id" Title="Product ID" />
            <PropertyColumn Property="x => x.Name" @SortBy="sortBy" />
            <PropertyColumn Property="x => x.Description" />
            <PropertyColumn Property="x => x.Unit_price" Title="Unit Price" />
            <PropertyColumn Property="x => x.Quantity_available" Title="Quantity" />
            <PropertyColumn Property="x => x.Supplier_Id" Title="Supplier ID" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="ProductModel" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private IEnumerable<ProductModel> _products = new List<ProductModel>();

    private string ipName = "", ipDescription = "", ipUnitPrice = "", ipQuantityAvailable = "", ipSupplierId = "",
                upID = "", upName = "", upDescription = "", upUnitPrice = "", upQuantityAvailable = "", upSupplierId = "",
                dpID = "";

    private string _searchString = "";

    private Func<ProductModel, object> _sortBy => x => x.Name;

    private Func<ProductModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Product_id} {x.Description} {x.Unit_price} {x.Quantity_available}".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            Console.WriteLine("User is not authenticated.");
            return;
        }

        _products = await _db.GetProduct();
    }

    private async Task InsertProduct()
    {
        // Validate inputs before attempting to insert
        if (string.IsNullOrEmpty(ipName) || string.IsNullOrEmpty(ipSupplierId) ||
            string.IsNullOrEmpty(ipUnitPrice) || string.IsNullOrEmpty(ipQuantityAvailable))
        {
            Console.WriteLine("Please fill all required fields.");
            return;
        }

        // Log input values to make sure they're properly captured
        Console.WriteLine($"Inserting Product: Name={ipName}, SupplierId={ipSupplierId}, UnitPrice={ipUnitPrice}, Quantity={ipQuantityAvailable}");

        // Create a new product model from the input values
        var newProduct = new ProductModel
            {
                Name = ipName,
                Description = ipDescription,
                Unit_price = decimal.TryParse(ipUnitPrice, out var unitPrice) ? unitPrice : 0,
                Quantity_available = int.TryParse(ipQuantityAvailable, out var quantity) ? quantity : 0,
                Supplier_Id = int.TryParse(ipSupplierId, out var supplierId) ? supplierId : 0
            };

        // Log the product data before inserting
        Console.WriteLine($"Product to Insert: {newProduct.Name}, {newProduct.Description}, {newProduct.Unit_price}, {newProduct.Quantity_available}, {newProduct.Supplier_Id}");

        // Call the database insertion method
        try
        {
            await _db.InsertProduct(newProduct);
            Console.WriteLine("Product inserted successfully.");

            // Reload products after insertion
            await LoadProducts();
        }
        catch (Exception ex)
        {
            // Log any errors that occur during insertion
            Console.WriteLine($"Error inserting product: {ex.Message}");
        }
    }


    private async Task UpdateProduct()
    {
        if (string.IsNullOrEmpty(upID) || string.IsNullOrEmpty(upName) || string.IsNullOrEmpty(upSupplierId))
        {
            Console.WriteLine("Please fill all required fields.");
            return;
        }

        var updatedProduct = new ProductModel
            {
                Product_id = int.Parse(upID),
                Name = upName,
                Description = upDescription,
                Unit_price = decimal.Parse(upUnitPrice),
                Quantity_available = int.Parse(upQuantityAvailable),
                Supplier_Id = int.Parse(upSupplierId)
            };

        await _db.UpdateProduct(updatedProduct);
        await LoadProducts();
    }

    private async Task DeleteProduct()
    {
        if (string.IsNullOrEmpty(dpID))
        {
            Console.WriteLine("Please provide a product ID.");
            return;
        }

        await _db.DeleteProduct(int.Parse(dpID));
        await LoadProducts();
    }
}
