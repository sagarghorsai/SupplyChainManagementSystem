@page "/orders"
@using DataAccessLibrary
@using DataAccessLibrary.Model
@inject IShipmentData ShipmentData
@inject IStoreData StoreData  // Inject StoreData to fetch customer details
@rendermode InteractiveServer
<PageTitle>Orders</PageTitle>

<h3>Orders</h3>

@if (orders == null)
{
    <p>Loading orders...</p>
}
else if (!orders.Any())
{
    <p>No orders found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Order ID</th>
                <th>Shipment Status</th>
                <th>Shipment Date</th>
                <th>Estimated Arrival</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.Order_Id</td>
                    <td>
                        <select @bind="order.Shipment_Confirmation" class="form-select">
                            <option value="Pending">Pending</option>
                            <option value="Shipped">Shipped</option>
                            <option value="Delivered">Delivered</option>
                        </select>
                    </td>
                    <td>@order.Shipment_Date.ToShortDateString()</td>
                    <td>@order.Estimated_Arrival_Date.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => UpdateShipmentStatus(order.Order_Id, order.Shipment_Confirmation)">
                            Update Status
                        </button>
                        <button class="btn btn-info ms-2" @onclick="() => ShowDetails(order.Order_Id)">
                            Details
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (selectedOrder != null)
{
    <h4 class="mt-4">Order Details</h4>
    <p><strong>Customer Name:</strong> @selectedOrder.CustomerName</p>
    <p><strong>Customer Email:</strong> @selectedOrder.CustomerEmail</p>
    <p><strong>Order Total:</strong> $@selectedOrder.Total_Amount</p>
    <p><strong>Order Items:</strong></p>
    <ul>
        @foreach (var item in selectedOrder.Items)
        {
            <li>@item.Name - @item.Quantity_ordered x $@item.Price</li>
        }
    </ul>
}

@code {
    private List<ShipmentModel> orders;
    private OrderDetail selectedOrder;

    protected override async Task OnInitializedAsync()
    {
        orders = new List<ShipmentModel>();

        try
        {
            orders = await ShipmentData.GetAllShipments();

            if (orders == null || !orders.Any())
            {
                Console.WriteLine("No orders found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading orders: {ex.Message}");
        }
    }

    private async Task UpdateShipmentStatus(int orderId, string status)
    {
        try
        {
            await ShipmentData.UpdateShipmentStatus(orderId, status);

            var orderToUpdate = orders.FirstOrDefault(order => order.Order_Id == orderId);
            if (orderToUpdate != null)
            {
                orderToUpdate.Shipment_Confirmation = status;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating shipment status for OrderId {orderId}: {ex.Message}");
        }
    }

    private async Task ShowDetails(int orderId) 
    {
        try
        {
            selectedOrder = await ShipmentData.GetOrderDetails(orderId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching details for OrderId {orderId}: {ex.Message}");
        }
    }

}
