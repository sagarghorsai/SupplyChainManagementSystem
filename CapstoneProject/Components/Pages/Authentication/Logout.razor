@page "/logout"
@using Microsoft.AspNetCore.Authentication;
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="d-flex flex-column justify-content-center align-items-center vh-100">
    <h1 class="display-4 text-success">Logged Out</h1>
    <p class="lead">You have successfully logged out.</p>
    <a href="/" class="btn btn-primary mt-3">Return to Home</a>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            // Check if HttpContext is available (static rendering)
            if (HttpContext != null)
            {
                if (HttpContext.User.Identity?.IsAuthenticated == true)
                {
                    await HttpContext.SignOutAsync();
                }
            }
            else
            {
                // We're in interactive mode, use AuthenticationStateProvider
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                if (user.Identity?.IsAuthenticated == true)
                {
                    // If using a custom AuthenticationStateProvider, update it here
                    if (AuthenticationStateProvider is IHostEnvironmentAuthenticationStateProvider authProvider)
                    {
                        authProvider.SetAuthenticationState(Task.FromResult(
                            new AuthenticationState(new System.Security.Claims.ClaimsPrincipal())));
                    }
                }
            }

            // Only redirect if we came from somewhere else to avoid loops
            if (!navigationManager.Uri.EndsWith("/logout", StringComparison.OrdinalIgnoreCase))
            {
                // Force reload to ensure the authentication state is properly cleared
                navigationManager.NavigateTo("/logout", true);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}